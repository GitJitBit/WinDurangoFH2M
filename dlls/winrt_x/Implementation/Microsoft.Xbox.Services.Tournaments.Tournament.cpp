#include "pch.h"
#include "Microsoft.Xbox.Services.Tournaments.Tournament.h"
#include "Microsoft.Xbox.Services.Tournaments.Tournament.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
////////

namespace winrt::Microsoft::Xbox::Services::Tournaments::implementation
{
    hstring Tournament::Id()
    {
        throw hresult_not_implemented();
    }
    hstring Tournament::OrganizerId()
    {
        throw hresult_not_implemented();
    }
    hstring Tournament::OrganizerName()
    {
        throw hresult_not_implemented();
    }
    hstring Tournament::Name()
    {
        throw hresult_not_implemented();
    }
    hstring Tournament::Description()
    {
        throw hresult_not_implemented();
    }
    hstring Tournament::GameMode()
    {
        throw hresult_not_implemented();
    }
    hstring Tournament::TournamentStyle()
    {
        throw hresult_not_implemented();
    }
    bool Tournament::IsRegistrationOpen()
    {
        throw hresult_not_implemented();
    }
    bool Tournament::IsCheckinOpen()
    {
        throw hresult_not_implemented();
    }
    bool Tournament::IsPlayingOpen()
    {
        throw hresult_not_implemented();
    }
    bool Tournament::HasPrize()
    {
        throw hresult_not_implemented();
    }
    bool Tournament::IsPaused()
    {
        throw hresult_not_implemented();
    }
    uint32_t Tournament::MinTeamSize()
    {
        throw hresult_not_implemented();
    }
    uint32_t Tournament::MaxTeamSize()
    {
        throw hresult_not_implemented();
    }
    uint32_t Tournament::TeamsRegisteredCount()
    {
        throw hresult_not_implemented();
    }
    uint32_t Tournament::MinTeamsRegistered()
    {
        throw hresult_not_implemented();
    }
    uint32_t Tournament::MaxTeamsRegistered()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Tournaments::TournamentState Tournament::TournamentState()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::RegistrationStartTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::RegistrationEndTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::CheckinStartTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::CheckinEndTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::PlayingStartTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::PlayingEndTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::DateTime Tournament::EndTime()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Tournaments::TeamSummary Tournament::TeamSummary()
    {
        throw hresult_not_implemented();
    }
}
