#pragma once
#include "Windows.Xbox.Input.InputManager.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////////

namespace winrt::Windows::Xbox::Input::implementation
{
    struct InputManager
    {
        InputManager() = default;

        static void SetKinectOnePersonSystemEngagement();
        static void SetKinectTwoPersonSystemEngagement();
        static void SetKinectOnePersonManualEngagement(winrt::Windows::Xbox::Input::BodyHandPair const& bodyHandPair);
        static void SetKinectTwoPersonManualEngagement(winrt::Windows::Xbox::Input::BodyHandPair const& bodyHandPair1, winrt::Windows::Xbox::Input::BodyHandPair const& bodyHandPair2);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::Input::BodyHandPair> KinectManualEngagedHands();
        static winrt::Windows::Xbox::Input::KinectEngagementMode KinectEngagementMode();
        static uint32_t MaximumKinectEngagedPersonCount();
        static winrt::Windows::Xbox::Input::SystemCursorVisibility SystemCursorVisibility();
        static void SystemCursorVisibility(winrt::Windows::Xbox::Input::SystemCursorVisibility const& visibility);
        static void DeferSystemGestures();
        static void OverrideKinectInteractionMode(winrt::Windows::Xbox::Input::KinectInteractionMode const& mode);
        static bool DoesGamepadDeferKinectInteractions();
        static void DoesGamepadDeferKinectInteractions(bool doesGamepadDeferKinectInteractions);
        static bool IsKinectPersonEngaged();
        static winrt::event_token IsKinectPersonEngagedChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Xbox::Input::IsKinectPersonEngagedChangedEventArgs> const& handler);
        static void IsKinectPersonEngagedChanged(winrt::event_token const& token) noexcept;
        static winrt::Windows::Xbox::Input::InputMode SmartglassInputMode();
        static void SmartglassInputMode(winrt::Windows::Xbox::Input::InputMode const& mode);
        static winrt::Windows::Xbox::Input::ManipulationMode SmartglassManipulationModes();
        static void SmartglassManipulationModes(winrt::Windows::Xbox::Input::ManipulationMode const& mode);
        static winrt::Windows::Xbox::Input::InputMode GamepadInputMode();
        static void GamepadInputMode(winrt::Windows::Xbox::Input::InputMode const& mode);
        static winrt::Windows::Xbox::Input::ManipulationMode GamepadManipulationModes();
        static void GamepadManipulationModes(winrt::Windows::Xbox::Input::ManipulationMode const& mode);
    };
}
namespace winrt::Windows::Xbox::Input::factory_implementation
{
    struct InputManager : InputManagerT<InputManager, implementation::InputManager>
    {
    };
}
