#pragma once
#include "Microsoft.Xbox.GameChat.ChatManagerSettings.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////////

namespace winrt::Microsoft::Xbox::GameChat::implementation
{
    struct ChatManagerSettings : ChatManagerSettingsT<ChatManagerSettings>
    {
        ChatManagerSettings() = default;

        uint32_t AudioThreadPeriodInMilliseconds();
        void AudioThreadPeriodInMilliseconds(uint32_t value);
        uint32_t AudioThreadAffinityMask();
        void AudioThreadAffinityMask(uint32_t value);
        int32_t AudioThreadPriority();
        void AudioThreadPriority(int32_t value);
        winrt::Windows::Xbox::Chat::EncodingQuality AudioEncodingQuality();
        void AudioEncodingQuality(winrt::Windows::Xbox::Chat::EncodingQuality const& value);
        uint32_t JitterBufferMaxPackets();
        void JitterBufferMaxPackets(uint32_t value);
        uint32_t JitterBufferLowestNeededPacketCount();
        void JitterBufferLowestNeededPacketCount(uint32_t value);
        uint32_t JitterBufferPacketsBeforeRelaxingNeeded();
        void JitterBufferPacketsBeforeRelaxingNeeded(uint32_t value);
        bool PerformanceCountersEnabled();
        void PerformanceCountersEnabled(bool value);
        bool CombineCaptureBuffersIntoSinglePacket();
        void CombineCaptureBuffersIntoSinglePacket(bool value);
        bool UseKinectAsCaptureSource();
        void UseKinectAsCaptureSource(bool value);
        bool PreEncodeCallbackEnabled();
        void PreEncodeCallbackEnabled(bool value);
        bool PostDecodeCallbackEnabled();
        void PostDecodeCallbackEnabled(bool value);
        winrt::Microsoft::Xbox::GameChat::GameChatDiagnosticsTraceLevel DiagnosticsTraceLevel();
        void DiagnosticsTraceLevel(winrt::Microsoft::Xbox::GameChat::GameChatDiagnosticsTraceLevel const& value);
        bool AutoMuteBadReputationUsers();
        void AutoMuteBadReputationUsers(bool value);
        uint32_t SessionStateUpdateRequestCoalesceDuration();
        void SessionStateUpdateRequestCoalesceDuration(uint32_t value);
        uint32_t MuteUserIfReputationIsBadCoalesceDuration();
        void MuteUserIfReputationIsBadCoalesceDuration(uint32_t value);
    };
}
