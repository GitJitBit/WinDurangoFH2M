#include "pch.h"
#include "Microsoft.Xbox.GameChat.ChatManagerSettings.h"
#include "Microsoft.Xbox.GameChat.ChatManagerSettings.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////////static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::Microsoft::Xbox::GameChat::implementation
{
    uint32_t ChatManagerSettings::AudioThreadPeriodInMilliseconds()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::AudioThreadPeriodInMilliseconds(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    uint32_t ChatManagerSettings::AudioThreadAffinityMask()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::AudioThreadAffinityMask(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    int32_t ChatManagerSettings::AudioThreadPriority()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::AudioThreadPriority(int32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Chat::EncodingQuality ChatManagerSettings::AudioEncodingQuality()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::AudioEncodingQuality(winrt::Windows::Xbox::Chat::EncodingQuality const& value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    uint32_t ChatManagerSettings::JitterBufferMaxPackets()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::JitterBufferMaxPackets(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    uint32_t ChatManagerSettings::JitterBufferLowestNeededPacketCount()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::JitterBufferLowestNeededPacketCount(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    uint32_t ChatManagerSettings::JitterBufferPacketsBeforeRelaxingNeeded()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::JitterBufferPacketsBeforeRelaxingNeeded(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    bool ChatManagerSettings::PerformanceCountersEnabled()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::PerformanceCountersEnabled(bool value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }

    bool m_CombineCaptureBuffersIntoSinglePacket;
    bool ChatManagerSettings::CombineCaptureBuffersIntoSinglePacket()
    {
        return m_CombineCaptureBuffersIntoSinglePacket;
    }
    void ChatManagerSettings::CombineCaptureBuffersIntoSinglePacket(bool value)
    {
        m_CombineCaptureBuffersIntoSinglePacket = value;
    }

    bool m_UseKinectAsCaptureSource;
    bool ChatManagerSettings::UseKinectAsCaptureSource()
    {
        return m_UseKinectAsCaptureSource;
    }
    void ChatManagerSettings::UseKinectAsCaptureSource(bool value)
    {
        m_UseKinectAsCaptureSource = value;
    }

    bool m_PreEncodeCallbackEnabled;
    bool ChatManagerSettings::PreEncodeCallbackEnabled()
    {
        return m_PreEncodeCallbackEnabled;
    }
    void ChatManagerSettings::PreEncodeCallbackEnabled(bool value)
    {
        m_PreEncodeCallbackEnabled = value;
    }

    bool m_PostDecodeCallbackEnabled;
    bool ChatManagerSettings::PostDecodeCallbackEnabled()
    {
        return m_PostDecodeCallbackEnabled;
    }
    void ChatManagerSettings::PostDecodeCallbackEnabled(bool value)
    {
        m_PostDecodeCallbackEnabled = value;
    }


    winrt::Microsoft::Xbox::GameChat::GameChatDiagnosticsTraceLevel ChatManagerSettings::DiagnosticsTraceLevel()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::DiagnosticsTraceLevel(winrt::Microsoft::Xbox::GameChat::GameChatDiagnosticsTraceLevel const& value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    bool ChatManagerSettings::AutoMuteBadReputationUsers()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::AutoMuteBadReputationUsers(bool value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    uint32_t ChatManagerSettings::SessionStateUpdateRequestCoalesceDuration()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::SessionStateUpdateRequestCoalesceDuration(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    uint32_t ChatManagerSettings::MuteUserIfReputationIsBadCoalesceDuration()
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
    void ChatManagerSettings::MuteUserIfReputationIsBadCoalesceDuration(uint32_t value)
    {
        printf("%s called\n", __FUNCTION__); throw hresult_not_implemented();
    }
}
