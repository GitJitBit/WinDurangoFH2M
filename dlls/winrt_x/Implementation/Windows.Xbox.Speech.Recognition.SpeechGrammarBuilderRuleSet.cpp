#include "pch.h"
#include "Windows.Xbox.Speech.Recognition.SpeechGrammarBuilderRuleSet.h"
#include "Windows.Xbox.Speech.Recognition.SpeechGrammarBuilderRuleSet.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.


namespace winrt::Windows::Xbox::Speech::Recognition::implementation
{
    winrt::Windows::Foundation::Collections::IIterator<winrt::Windows::Foundation::Collections::IKeyValuePair<hstring, winrt::Windows::Xbox::Speech::Recognition::ISpeechRule>> SpeechGrammarBuilderRuleSet::First()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::ISpeechRule SpeechGrammarBuilderRuleSet::Lookup(hstring const& key)
    {
        throw hresult_not_implemented();
    }
    uint32_t SpeechGrammarBuilderRuleSet::Size()
    {
        throw hresult_not_implemented();
    }
    bool SpeechGrammarBuilderRuleSet::HasKey(hstring const& key)
    {
        throw hresult_not_implemented();
    }
    void SpeechGrammarBuilderRuleSet::Split(winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Xbox::Speech::Recognition::ISpeechRule>& first, winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Xbox::Speech::Recognition::ISpeechRule>& second)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::SpeechChoiceRule SpeechGrammarBuilderRuleSet::AddChoiceRule(hstring const& key, winrt::Windows::Foundation::Collections::IIterable<hstring> const& phrases)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::SpeechChoiceRule SpeechGrammarBuilderRuleSet::AddChoiceRule(hstring const& key)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::SpeechSequenceRule SpeechGrammarBuilderRuleSet::AddSequenceRule(hstring const& key, winrt::Windows::Foundation::Collections::IIterable<winrt::Windows::Xbox::Speech::Recognition::ISpeechRuleItem> const& items)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::SpeechSequenceRule SpeechGrammarBuilderRuleSet::AddSequenceRule(hstring const& key)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::SpeechGraphRule SpeechGrammarBuilderRuleSet::AddGraphRule(hstring const& key)
    {
        throw hresult_not_implemented();
    }
    void SpeechGrammarBuilderRuleSet::Clear()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Speech::Recognition::ISpeechRule SpeechGrammarBuilderRuleSet::Remove(hstring const& key)
    {
        throw hresult_not_implemented();
    }
}
