#pragma once
#include "Windows.Xbox.ApplicationModel.State.Internal.PackageInfo.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////////

namespace winrt::Windows::Xbox::ApplicationModel::State::Internal::implementation
{
    struct PackageInfo
    {
        PackageInfo() = default;

        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> Find(winrt::Windows::Xbox::ApplicationModel::State::Internal::FindPackageInfoFilter const& filter);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByDeviceId(winrt::guid const& deviceId, winrt::Windows::Xbox::ApplicationModel::State::Internal::FindPackageInfoFilter const& filter);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByContentId(winrt::guid const& contentId);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByProductId(winrt::guid const& productId);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByTitleId(uint32_t titleId);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByAllowedProductId(winrt::guid const& allowedProductId);
        static winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo FindByPackageInstanceId(hstring const& packageInstanceId);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindUniversalPackagesByFamilyName(hstring const& packageFamilyName);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByAllowedPackageFamilyName(hstring const& allowedPackageFamilyName);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindUnparented();
        static winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo FindByFullName(hstring const& fullName);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindByTitleSearchString(hstring const& searchString, uint32_t maxResults);
        static winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo FindGameHub(winrt::guid const& gameHubId);
        static winrt::Windows::Foundation::Collections::IVectorView<winrt::Windows::Xbox::ApplicationModel::State::Internal::IPackageInfo> FindPackagesForGameHub(winrt::guid const& gameHubId);
    };
}
namespace winrt::Windows::Xbox::ApplicationModel::State::Internal::factory_implementation
{
    struct PackageInfo : PackageInfoT<PackageInfo, implementation::PackageInfo>
    {
    };
}
