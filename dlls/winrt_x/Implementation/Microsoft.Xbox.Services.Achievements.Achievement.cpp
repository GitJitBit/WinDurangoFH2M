#include "pch.h"
#include "Microsoft.Xbox.Services.Achievements.Achievement.h"
#include "Microsoft.Xbox.Services.Achievements.Achievement.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////

namespace winrt::Microsoft::Xbox::Services::Achievements::implementation
{
    hstring Achievement::Id()
    {
        throw hresult_not_implemented();
    }
    hstring Achievement::ServiceConfigurationId()
    {
        throw hresult_not_implemented();
    }
    hstring Achievement::Name()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Xbox::Services::Achievements::AchievementTitleAssociation> Achievement::TitleAssociations()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Achievements::AchievementProgressState Achievement::ProgressState()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Achievements::AchievementProgression Achievement::Progression()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Xbox::Services::Achievements::AchievementMediaAsset> Achievement::MediaAssets()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<hstring> Achievement::PlatformsAvailableOn()
    {
        throw hresult_not_implemented();
    }
    bool Achievement::IsSecret()
    {
        throw hresult_not_implemented();
    }
    hstring Achievement::UnlockedDescription()
    {
        throw hresult_not_implemented();
    }
    hstring Achievement::LockedDescription()
    {
        throw hresult_not_implemented();
    }
    hstring Achievement::ProductId()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Achievements::AchievementType Achievement::AchievementType()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Achievements::AchievementParticipationType Achievement::ParticipationType()
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Achievements::AchievementTimeWindow Achievement::Available()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Xbox::Services::Achievements::AchievementReward> Achievement::Rewards()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::TimeSpan Achievement::EstimatedUnlockTime()
    {
        throw hresult_not_implemented();
    }
    hstring Achievement::DeepLink()
    {
        throw hresult_not_implemented();
    }
    bool Achievement::IsRevoked()
    {
        throw hresult_not_implemented();
    }
}
