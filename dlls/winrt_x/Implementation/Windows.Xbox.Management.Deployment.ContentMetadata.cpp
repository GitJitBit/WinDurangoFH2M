#include "pch.h"
#include "Windows.Xbox.Management.Deployment.ContentMetadata.h"
#include "Windows.Xbox.Management.Deployment.ContentMetadata.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////////

namespace winrt::Windows::Xbox::Management::Deployment::implementation
{
    ContentMetadata::ContentMetadata(winrt::Windows::Xbox::Management::Deployment::ContentMetadataInitData const& initData)
    {
        throw hresult_not_implemented();
    }
    ContentMetadata::ContentMetadata(winrt::Windows::Xbox::Management::Deployment::ContentMetadataInitData const& initData, winrt::Windows::Foundation::Collections::IVectorView<winrt::guid> const& relatedMedia, winrt::Windows::Foundation::Collections::IVectorView<hstring> const& relatedMediaFamilyNames)
    {
        throw hresult_not_implemented();
    }
    ContentMetadata::ContentMetadata(winrt::Windows::Xbox::Management::Deployment::ContentMetadataInitData const& initData, winrt::guid const& siblingId, winrt::guid const& variantId, winrt::Windows::Foundation::Collections::IVectorView<winrt::guid> const& relatedMedia, winrt::Windows::Foundation::Collections::IVectorView<hstring> const& relatedMediaFamilyNames)
    {
        throw hresult_not_implemented();
    }
    ContentMetadata::ContentMetadata(winrt::Windows::Xbox::Management::Deployment::ContentMetadataInitData const& initData, winrt::guid const& siblingId, winrt::guid const& variantId, winrt::Windows::Foundation::Collections::IVectorView<winrt::guid> const& relatedMedia, winrt::Windows::Foundation::Collections::IVectorView<hstring> const& relatedMediaFamilyNames, winrt::guid const& gameHubId, bool isGameHub)
    {
        throw hresult_not_implemented();
    }
    hstring ContentMetadata::Name()
    {
        throw hresult_not_implemented();
    }
    winrt::guid ContentMetadata::ProductId()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Uri ContentMetadata::LogoUri()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Uri ContentMetadata::SmallLogoUri()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Uri ContentMetadata::WideLogoUri()
    {
        throw hresult_not_implemented();
    }
    hstring ContentMetadata::DownloadUri()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Management::Deployment::CatalogType ContentMetadata::CatalogType()
    {
        throw hresult_not_implemented();
    }
    uint64_t ContentMetadata::Size()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Management::Deployment::MetadataSource ContentMetadata::MetadataSource()
    {
        throw hresult_not_implemented();
    }
    uint32_t ContentMetadata::TitleId()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<winrt::guid> ContentMetadata::RelatedMedia()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::ApplicationModel::State::Internal::GameAttributes ContentMetadata::Attributes()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<hstring> ContentMetadata::RelatedMediaFamilyNames()
    {
        throw hresult_not_implemented();
    }
    hstring ContentMetadata::Ratings()
    {
        throw hresult_not_implemented();
    }
    winrt::guid ContentMetadata::SiblingId()
    {
        throw hresult_not_implemented();
    }
    winrt::guid ContentMetadata::VariantId()
    {
        throw hresult_not_implemented();
    }
    winrt::guid ContentMetadata::GameHubId()
    {
        throw hresult_not_implemented();
    }
    bool ContentMetadata::IsGameHub()
    {
        throw hresult_not_implemented();
    }
}
