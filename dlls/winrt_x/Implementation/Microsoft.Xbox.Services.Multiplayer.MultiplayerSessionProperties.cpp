#include "pch.h"
#include "Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionProperties.h"
#include "Microsoft.Xbox.Services.Multiplayer.MultiplayerSessionProperties.g.cpp"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
////////

namespace winrt::Microsoft::Xbox::Services::Multiplayer::implementation
{
    winrt::Windows::Foundation::Collections::IVectorView<hstring> MultiplayerSessionProperties::Keywords()
    {
        throw hresult_not_implemented();
    }
    void MultiplayerSessionProperties::Keywords(winrt::Windows::Foundation::Collections::IVectorView<hstring> const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Multiplayer::MultiplayerSessionRestriction MultiplayerSessionProperties::JoinRestriction()
    {
        throw hresult_not_implemented();
    }
    void MultiplayerSessionProperties::JoinRestriction(winrt::Microsoft::Xbox::Services::Multiplayer::MultiplayerSessionRestriction const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Microsoft::Xbox::Services::Multiplayer::MultiplayerSessionRestriction MultiplayerSessionProperties::ReadRestriction()
    {
        throw hresult_not_implemented();
    }
    void MultiplayerSessionProperties::ReadRestriction(winrt::Microsoft::Xbox::Services::Multiplayer::MultiplayerSessionRestriction const& value)
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Xbox::Services::Multiplayer::MultiplayerSessionMember> MultiplayerSessionProperties::TurnCollection()
    {
        throw hresult_not_implemented();
    }
    void MultiplayerSessionProperties::TurnCollection(winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Xbox::Services::Multiplayer::MultiplayerSessionMember> const& value)
    {
        throw hresult_not_implemented();
    }
    hstring MultiplayerSessionProperties::MatchmakingTargetSessionConstantsJson()
    {
        throw hresult_not_implemented();
    }
    hstring MultiplayerSessionProperties::SessionCustomPropertiesJson()
    {
        throw hresult_not_implemented();
    }
    hstring MultiplayerSessionProperties::MatchmakingServerConnectionString()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<hstring> MultiplayerSessionProperties::ServerConnectionStringCandidates()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::Collections::IVectorView<uint32_t> MultiplayerSessionProperties::SessionOwnerIndices()
    {
        throw hresult_not_implemented();
    }
    hstring MultiplayerSessionProperties::HostDeviceToken()
    {
        throw hresult_not_implemented();
    }
    bool MultiplayerSessionProperties::Closed()
    {
        throw hresult_not_implemented();
    }
    bool MultiplayerSessionProperties::Locked()
    {
        throw hresult_not_implemented();
    }
    bool MultiplayerSessionProperties::AllocateCloudCompute()
    {
        throw hresult_not_implemented();
    }
}
